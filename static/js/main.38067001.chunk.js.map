{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","trim","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","res","json","data","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.38067001.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow shadow-5\">\r\n      <img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200&set=set4`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    // For testing purpose\r\n    // if (true) {\r\n    //     throw new Error('You DIED')\r\n    // }\r\n    console.log('CardList');\r\n    return (\r\n        <>\r\n            {robots.map(robot => <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />)}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  console.log('SearchBox')\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input aria-label=\"Search Robots\" className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  // from react 16\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return { count: state.count + 1 };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log('CounterButton');\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n// let Header = () => {\r\n//   console.log('Header');\r\n//   return <h1 className=\"f1\">RoboFriends</h1>;\r\n// }\r\n\r\n// Header = React.memo(Header)\r\n\r\nclass Header extends Component {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   console.log('Header should component update');\r\n  //   return false;\r\n  // }\r\n\r\n  render() {\r\n    console.log('Header');\r\n    return (\r\n      <div>\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <CounterButton color=\"red\"></CounterButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n});\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(\r\n            robot => robot.name\r\n                .toLowerCase()\r\n                .includes(searchField.trim().toLowerCase())\r\n        )\r\n\r\n        return isPending\r\n            ? <h1 className=\"tc f1\">Loading</h1>\r\n            : (\r\n                <div className=\"tc\" >\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n// Now App is subscribed to redux store\r\n// mapStateToProps: what state should I listen to\r\n// mapDispatchToProps: what actions should I listen to\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      // console.log('returned state for searchRobots reducers');\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      // console.log('returned state for requestRobots reducers');\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App'\r\nimport { searchRobots, requestRobots } from './reducers'\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}